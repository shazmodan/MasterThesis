\relax 
\catcode`"\active
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\@writefile{toc}{\changetocdepth  {2}}
\select@language{swedish}
\@writefile{toc}{\select@language{swedish}}
\@writefile{lof}{\select@language{swedish}}
\@writefile{lot}{\select@language{swedish}}
\select@language{english}
\@writefile{toc}{\select@language{english}}
\@writefile{lof}{\select@language{english}}
\@writefile{lot}{\select@language{english}}
\select@language{swedish}
\@writefile{toc}{\select@language{swedish}}
\@writefile{lof}{\select@language{swedish}}
\@writefile{lot}{\select@language{swedish}}
\select@language{english}
\@writefile{toc}{\select@language{english}}
\@writefile{lof}{\select@language{english}}
\@writefile{lot}{\select@language{english}}
\@writefile{lof}{\addvspace {10pt}}
\@writefile{lot}{\addvspace {10pt}}
\@writefile{toc}{\contentsline {chapter}{\chapternumberline {1}Introduction}{1}{chapter.1}}
\@writefile{toc}{\contentsline {section}{\numberline {1.1}Problem Statement}{1}{section.1.1}}
\@writefile{toc}{\contentsline {section}{\numberline {1.2}Goal}{1}{section.1.2}}
\@writefile{toc}{\contentsline {section}{\numberline {1.3}About Valtech}{2}{section.1.3}}
\citation{Gradebot}
\citation{Suleman}
\citation{Hollingsworth}
\@writefile{lof}{\addvspace {10pt}}
\@writefile{lot}{\addvspace {10pt}}
\@writefile{toc}{\contentsline {chapter}{\chapternumberline {2}Background}{3}{chapter.2}}
\@writefile{toc}{\contentsline {section}{\numberline {2.1}What is Automatic Grading?}{3}{section.2.1}}
\citation{GenerationReview}
\citation{Gradebot}
\citation{GenerationReview}
\citation{Gradebot}
\citation{Suleman}
\citation{GenerationReview}
\citation{Kattis}
\citation{Amelung}
\citation{GradingScheme}
\@writefile{toc}{\contentsline {section}{\numberline {2.2}History}{4}{section.2.2}}
\@writefile{toc}{\contentsline {section}{\numberline {2.3}Today's Systems}{4}{section.2.3}}
\newlabel{sec:todays_systems}{{2.3}{4}{Today's Systems\relax }{section.2.3}{}}
\@writefile{lof}{\addvspace {10pt}}
\@writefile{lot}{\addvspace {10pt}}
\@writefile{toc}{\contentsline {chapter}{\chapternumberline {3}Method}{7}{chapter.3}}
\@writefile{toc}{\contentsline {section}{\numberline {3.1}System Description}{7}{section.3.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.1}{\ignorespaces Overview of CELINE.}}{7}{figure.3.1}}
\newlabel{fig:SystemOverview}{{3.1}{7}{Overview of CELINE}{figure.3.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.1}The Web GUI and workflow}{8}{subsection.3.1.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.2}{\ignorespaces The start page of CELINE.}}{8}{figure.3.2}}
\newlabel{fig:celine_startpage}{{3.2}{8}{The start page of CELINE}{figure.3.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.3}{\ignorespaces Listing of available problems page. This page is shown when a user clicks on the ``Problems'' text in the top-right. One of the available problems is called ``easysort''. }}{9}{figure.3.3}}
\newlabel{fig:celine_list_problems}{{3.3}{9}{Listing of available problems page. This page is shown when a user clicks on the ``Problems'' text in the top-right. One of the available problems is called ``easysort''}{figure.3.3}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.2}The Automatic Grading System}{9}{subsection.3.1.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.3}System-User Feedback}{9}{subsection.3.1.3}}
\newlabel{subsec:status_codes}{{3.1.3}{9}{System-User Feedback\relax }{subsection.3.1.3}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.4}{\ignorespaces Problem information page. This is where applicants can read about the problem statement and get information regarding what to expect as input and what the system expects their solution to output.}}{10}{figure.3.4}}
\newlabel{fig:celine_easysort}{{3.4}{10}{Problem information page. This is where applicants can read about the problem statement and get information regarding what to expect as input and what the system expects their solution to output}{figure.3.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3.5}{\ignorespaces Code submission page. This page provides the user with details regarding submitting a solution to a problem. The system requires that a specific programming language to be selected from the drop down list at the top, a main class name and a specified method signature (acting as the application's entry point).}}{11}{figure.3.5}}
\newlabel{fig:celine_submit}{{3.5}{11}{Code submission page. This page provides the user with details regarding submitting a solution to a problem. The system requires that a specific programming language to be selected from the drop down list at the top, a main class name and a specified method signature (acting as the application's entry point)}{figure.3.5}{}}
\citation{MicrosoftCSharp}
\citation{CodeDomCompiler}
\citation{Javac}
\citation{JDK}
\citation{IKVMC}
\citation{IKVM.NET}
\citation{IronPython}
\@writefile{lof}{\contentsline {figure}{\numberline {3.6}{\ignorespaces All submissions page. This page displays a list of all submissions that an applicant has made. Each item in the list contains a unique id, the name of the problem, the date of when the submission was sent, the status code which indicates if the output was accepted or not, the time it took for the output to be produced and the language that was used.}}{12}{figure.3.6}}
\newlabel{fig:celine_submissions}{{3.6}{12}{All submissions page. This page displays a list of all submissions that an applicant has made. Each item in the list contains a unique id, the name of the problem, the date of when the submission was sent, the status code which indicates if the output was accepted or not, the time it took for the output to be produced and the language that was used}{figure.3.6}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3.2}Supported Languages}{12}{section.3.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.1}C\#}{12}{subsection.3.2.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.2}Java}{12}{subsection.3.2.2}}
\citation{ApplicationDomains}
\citation{Marshals}
\@writefile{lof}{\contentsline {figure}{\numberline {3.7}{\ignorespaces Common paths of problem flow in the AGS.}}{13}{figure.3.7}}
\newlabel{fig:flowchart}{{3.7}{13}{Common paths of problem flow in the AGS}{figure.3.7}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2.3}Python}{13}{subsection.3.2.3}}
\@writefile{toc}{\contentsline {section}{\numberline {3.3}Difficulties and Limitations}{13}{section.3.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.1}Security}{13}{subsection.3.3.1}}
\newlabel{subsec:security}{{3.3.1}{13}{Security\relax }{subsection.3.3.1}{}}
\citation{Suleman}
\citation{StackOverflowException}
\citation{IronPythonPerformance}
\citation{CLSCompliant}
\citation{AccessingPythonCode}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.2}IronPython Limitations}{14}{subsection.3.3.2}}
\newlabel{subsec:ironpython_limitations}{{3.3.2}{14}{IronPython Limitations\relax }{subsection.3.3.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3.3}White- and Black-box Testing}{14}{subsection.3.3.3}}
\newlabel{subsec:whitebox_blackbox}{{3.3.3}{14}{White- and Black-box Testing\relax }{subsection.3.3.3}{}}
\citation{Kattis}
\citation{Stopwatch}
\@writefile{lof}{\addvspace {10pt}}
\@writefile{lot}{\addvspace {10pt}}
\@writefile{toc}{\contentsline {chapter}{\chapternumberline {4}Testing Methodology}{15}{chapter.4}}
\@writefile{toc}{\contentsline {section}{\numberline {4.1}Aspects to Test}{15}{section.4.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1.1}Execution Speed}{15}{subsection.4.1.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1.2}Memory Consumption}{15}{subsection.4.1.2}}
\citation{BigO}
\@writefile{toc}{\contentsline {section}{\numberline {4.2}The Chosen Tests}{16}{section.4.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2.1}Language Overhead}{16}{subsection.4.2.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.1}{\ignorespaces C\# code for language overhead testing.}}{16}{figure.4.1}}
\newlabel{fig:language_overhead}{{4.1}{16}{C\# code for language overhead testing}{figure.4.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2.2}Common Operators}{16}{subsection.4.2.2}}
\citation{Cook}
\citation{Musser}
\citation{Castro}
\citation{Insertionsort}
\citation{Cole}
\citation{Castro}
\@writefile{lof}{\contentsline {figure}{\numberline {4.2}{\ignorespaces Python code for testing the addition operation.}}{17}{figure.4.2}}
\newlabel{fig:addition_test}{{4.2}{17}{Python code for testing the addition operation}{figure.4.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2.3}Insertion Sort}{17}{subsection.4.2.3}}
\citation{Mergesort}
\citation{ExecutionEngine}
\citation{Jit}
\citation{SingerJit}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2.4}Merge Sort}{18}{subsection.4.2.4}}
\newlabel{subsec:merge_sort}{{4.2.4}{18}{Merge Sort\relax }{subsection.4.2.4}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4.3}About Just-in-time compilation}{18}{section.4.3}}
\newlabel{sec:jit}{{4.3}{18}{About Just-in-time compilation\relax }{section.4.3}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4.3}{\ignorespaces Illustration of the Merge Sort algorithm using eight cards. The cards are subsequently divided up and then merged back together in sorted order.}}{19}{figure.4.3}}
\newlabel{fig:mergesort}{{4.3}{19}{Illustration of the Merge Sort algorithm using eight cards. The cards are subsequently divided up and then merged back together in sorted order}{figure.4.3}{}}
\@writefile{lof}{\addvspace {10pt}}
\@writefile{lot}{\addvspace {10pt}}
\@writefile{toc}{\contentsline {chapter}{\chapternumberline {5}Testing Results}{21}{chapter.5}}
\newlabel{chap:results}{{5}{21}{\@empty \relax }{chapter.5}{}}
\@writefile{toc}{\contentsline {section}{\numberline {5.1}Testing Systems Specifications}{21}{section.5.1}}
\newlabel{sec:system_specs}{{5.1}{21}{Testing Systems Specifications\relax }{section.5.1}{}}
\@writefile{lot}{\contentsline {table}{\numberline {5.1}{\ignorespaces System specifications for the computers used.}}{21}{table.5.1}}
\newlabel{table:system_specs}{{5.1}{21}{System specifications for the computers used}{table.5.1}{}}
\@writefile{toc}{\contentsline {section}{\numberline {5.2}Testing Procedure}{21}{section.5.2}}
\@writefile{toc}{\contentsline {section}{\numberline {5.3}Results}{22}{section.5.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.3.1}Native environments}{22}{subsection.5.3.1}}
\@writefile{toc}{\contentsline {subsubsection}{Addition Operator}{22}{section*.3}}
\@writefile{toc}{\contentsline {subsubsection}{Insertion Sort}{22}{section*.4}}
\@writefile{toc}{\contentsline {subsubsection}{Merge Sort}{22}{section*.5}}
\@writefile{lof}{\contentsline {figure}{\numberline {5.1}{\ignorespaces This tests a language ability to sum 10 million elements. Lower is better. The results show that Java running in its native environment is the fastest of the three languages with 1.113 seconds. Python is the slowest of the three with a runtime of 5.278 seconds, even when using its native library functions to sum the elements, see \ref  {appendix:code_addition}.}}{23}{figure.5.1}}
\newlabel{fig:native_addition}{{5.1}{23}{This tests a language ability to sum 10 million elements. Lower is better. The results show that Java running in its native environment is the fastest of the three languages with 1.113 seconds. Python is the slowest of the three with a runtime of 5.278 seconds, even when using its native library functions to sum the elements, see \ref {appendix:code_addition}}{figure.5.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.3.2}.NET environment}{23}{subsection.5.3.2}}
\newlabel{subsec:net_environment}{{5.3.2}{23}{.NET environment\relax }{subsection.5.3.2}{}}
\@writefile{toc}{\contentsline {subsubsection}{Language Overhead}{23}{section*.6}}
\newlabel{subsec:language_overhead}{{5.3.2}{23}{Language Overhead\relax }{section*.6}{}}
\@writefile{toc}{\contentsline {subsubsection}{Addition Operator}{23}{section*.7}}
\@writefile{lof}{\contentsline {figure}{\numberline {5.2}{\ignorespaces This test uses the Insertion sort algorithm to sort 10'000 elements in ascending order. Lower is better. Note that the vertical axis is base 10 logarithmic. Java was the fastest with 0.015 seconds while Python was the slowest with 4.191 seconds. }}{24}{figure.5.2}}
\newlabel{fig:native_insertion_sort}{{5.2}{24}{This test uses the Insertion sort algorithm to sort 10'000 elements in ascending order. Lower is better. Note that the vertical axis is base 10 logarithmic. Java was the fastest with 0.015 seconds while Python was the slowest with 4.191 seconds}{figure.5.2}{}}
\@writefile{toc}{\contentsline {subsubsection}{Insertion Sort}{24}{section*.8}}
\@writefile{toc}{\contentsline {subsubsection}{Merge Sort}{24}{section*.9}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.3.3}The scaling factors}{24}{subsection.5.3.3}}
\@writefile{lof}{\contentsline {figure}{\numberline {5.3}{\ignorespaces This test uses the Merge sort algorithm to sort one million elements in ascending order. Lower is better. Note that the vertical axis is base 10 logarithmic. Java was the fastest with 0.281 seconds while Python was the slowest with 12.358 seconds.}}{25}{figure.5.3}}
\newlabel{fig:native_merge_sort}{{5.3}{25}{This test uses the Merge sort algorithm to sort one million elements in ascending order. Lower is better. Note that the vertical axis is base 10 logarithmic. Java was the fastest with 0.281 seconds while Python was the slowest with 12.358 seconds}{figure.5.3}{}}
\@writefile{lot}{\contentsline {table}{\numberline {5.2}{\ignorespaces The overhead startup cost for each language when run in the .NET environment. Since C\# is the native language it has the lowest startup time with 0.014 seconds while Python has the longest with 1.006 seconds.}}{25}{table.5.2}}
\newlabel{table:language_overhead}{{5.2}{25}{The overhead startup cost for each language when run in the .NET environment. Since C\# is the native language it has the lowest startup time with 0.014 seconds while Python has the longest with 1.006 seconds}{table.5.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5.4}{\ignorespaces This tests a language ability to sum 10 million elements. Lower is better. The results show that C\# running in its native environment (.NET) was the fastest of the three languages with 2.909 seconds. Python was the slowest of the three with a runtime of 4.867 seconds.}}{26}{figure.5.4}}
\newlabel{fig:net_addition}{{5.4}{26}{This tests a language ability to sum 10 million elements. Lower is better. The results show that C\# running in its native environment (.NET) was the fastest of the three languages with 2.909 seconds. Python was the slowest of the three with a runtime of 4.867 seconds}{figure.5.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5.5}{\ignorespaces This test was run in the .NET environment and used the Insertion sort algorithm to sort 10'000 elements in ascending order. Lower is better. Note that the vertical axis is base 10 logarithmic. C\# was the fastest with 0.087 seconds. Java was a close second with 0.114 seconds. Python was the worst with 9.36 seconds.}}{27}{figure.5.5}}
\newlabel{fig:net_insertion_sort}{{5.5}{27}{This test was run in the .NET environment and used the Insertion sort algorithm to sort 10'000 elements in ascending order. Lower is better. Note that the vertical axis is base 10 logarithmic. C\# was the fastest with 0.087 seconds. Java was a close second with 0.114 seconds. Python was the worst with 9.36 seconds}{figure.5.5}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5.6}{\ignorespaces This test was run in the .NET environment and used the Merge sort algorithm to sort one million elements in ascending order. A lower value is better. Note that the vertical axis is base 10 logarithmic. C\# was the fastest with 0.759 seconds. Java came in second with 0.967 seconds. Python was the slowest with 71.663 seconds.}}{28}{figure.5.6}}
\newlabel{fig:net_merge_sort}{{5.6}{28}{This test was run in the .NET environment and used the Merge sort algorithm to sort one million elements in ascending order. A lower value is better. Note that the vertical axis is base 10 logarithmic. C\# was the fastest with 0.759 seconds. Java came in second with 0.967 seconds. Python was the slowest with 71.663 seconds}{figure.5.6}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5.7}{\ignorespaces This test was run in the .NET environment and used the Merge sort algorithm to sort one million elements in ascending order. A lower value is better. C\# and Java performed almost equally with 119MB and 120MB of memory used. Python performed the worst with 181MB of memory used. }}{29}{figure.5.7}}
\newlabel{fig:net_merge_sort_memory}{{5.7}{29}{This test was run in the .NET environment and used the Merge sort algorithm to sort one million elements in ascending order. A lower value is better. C\# and Java performed almost equally with 119MB and 120MB of memory used. Python performed the worst with 181MB of memory used}{figure.5.7}{}}
\@writefile{lot}{\contentsline {table}{\numberline {5.3}{\ignorespaces This table shows the scaling factors of each language based on the test results in Section \ref  {subsec:net_environment}. Java had a very consistent result set, the difference between the min and max value was only 0.04 while Python varied greatly.}}{29}{table.5.3}}
\newlabel{table:scaling_factors}{{5.3}{29}{This table shows the scaling factors of each language based on the test results in Section \ref {subsec:net_environment}. Java had a very consistent result set, the difference between the min and max value was only 0.04 while Python varied greatly}{table.5.3}{}}
\citation{PythonSum}
\citation{PythonReduce}
\citation{PythonSort}
\citation{PythonInteger}
\@writefile{lof}{\addvspace {10pt}}
\@writefile{lot}{\addvspace {10pt}}
\@writefile{toc}{\contentsline {chapter}{\chapternumberline {6}Discussion}{31}{chapter.6}}
\@writefile{toc}{\contentsline {section}{\numberline {6.1}Result Analysis}{31}{section.6.1}}
\citation{JavaScript.NET}
\citation{Jint}
\citation{Phalanger}
\citation{IronRuby}
\citation{Tiobe}
\@writefile{toc}{\contentsline {section}{\numberline {6.2}Conclusion}{32}{section.6.2}}
\@writefile{toc}{\contentsline {section}{\numberline {6.3}Future Work}{32}{section.6.3}}
\@writefile{toc}{\contentsline {chapter}{Bilagor}{33}{section*.10}}
\@writefile{lof}{\addvspace {10pt}}
\@writefile{lot}{\addvspace {10pt}}
\@writefile{toc}{\contentsline {chapter}{\chapternumberline {A}Code}{35}{appendix.A}}
\newlabel{appendix:code}{{A}{35}{\@empty \relax }{appendix.A}{}}
\@writefile{toc}{\contentsline {section}{\numberline {A.1}Language Overhead}{35}{section.A.1}}
\@writefile{toc}{\contentsline {section}{\numberline {A.2}Common Operators}{35}{section.A.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {A.2.1}Addition}{35}{subsection.A.2.1}}
\newlabel{appendix:code_addition}{{A.2.1}{35}{Addition\relax }{subsection.A.2.1}{}}
\@writefile{toc}{\contentsline {subsubsection}{C\#}{35}{section*.11}}
\@writefile{toc}{\contentsline {subsubsection}{Java}{36}{section*.12}}
\@writefile{toc}{\contentsline {subsubsection}{Python}{36}{section*.13}}
\@writefile{toc}{\contentsline {subsection}{\numberline {A.2.2}Subtraction}{36}{subsection.A.2.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {A.2.3}Multiplication}{37}{subsection.A.2.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {A.2.4}Division}{38}{subsection.A.2.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {A.2.5}Modulo}{39}{subsection.A.2.5}}
\@writefile{toc}{\contentsline {section}{\numberline {A.3}Insertion Sort}{40}{section.A.3}}
\@writefile{toc}{\contentsline {section}{\numberline {A.4}Merge Sort}{41}{section.A.4}}
\bibdata{chapters/mybib}
\bibcite{Gradebot}{1}
\bibcite{Suleman}{2}
\bibcite{Hollingsworth}{3}
\bibcite{GenerationReview}{4}
\bibcite{Kattis}{5}
\bibcite{Amelung}{6}
\bibcite{GradingScheme}{7}
\bibcite{MicrosoftCSharp}{8}
\bibcite{CodeDomCompiler}{9}
\bibcite{Javac}{10}
\@writefile{toc}{\contentsline {chapter}{Bibliography}{47}{section*.15}}
\bibcite{JDK}{11}
\bibcite{IKVMC}{12}
\bibcite{IKVM.NET}{13}
\bibcite{IronPython}{14}
\bibcite{ApplicationDomains}{15}
\bibcite{Marshals}{16}
\bibcite{StackOverflowException}{17}
\bibcite{IronPythonPerformance}{18}
\bibcite{CLSCompliant}{19}
\bibcite{AccessingPythonCode}{20}
\bibcite{Stopwatch}{21}
\bibcite{BigO}{22}
\bibcite{Cook}{23}
\bibcite{Musser}{24}
\bibcite{Castro}{25}
\bibcite{Insertionsort}{26}
\bibcite{Cole}{27}
\bibcite{Mergesort}{28}
\bibcite{ExecutionEngine}{29}
\bibcite{Jit}{30}
\bibcite{SingerJit}{31}
\bibcite{PythonSum}{32}
\bibcite{PythonReduce}{33}
\bibcite{PythonSort}{34}
\bibcite{PythonInteger}{35}
\bibcite{JavaScript.NET}{36}
\bibcite{Jint}{37}
\bibcite{Phalanger}{38}
\bibcite{IronRuby}{39}
\bibcite{Tiobe}{40}
\bibstyle{unsrt}
\setcounter{lastsheet}{60}
\setcounter{lastpage}{50}
